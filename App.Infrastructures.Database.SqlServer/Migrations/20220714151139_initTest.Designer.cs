// <auto-generated />
using System;
using App.Infrastructures.Database.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructures.Database.SqlServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220714151139_initTest")]
    partial class initTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Domain.Core.BaseData._1_Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("App.Domain.Core.Job._1_Entitys.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CostumerAddressId")
                        .HasColumnType("int");

                    b.Property<string>("CostumerEndNote")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("CostumerEstimatedFinalCost")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<int>("CostumerId")
                        .HasColumnType("int");

                    b.Property<short?>("CostumerRatingForWorker")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("FinalCost")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnlinePayment")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("JobAcceptedByWorkerDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("JobClosedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("JobStartedByWorkerDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MaterialCost")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<string>("OnlinePaymentReceiptInfo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("WageCost")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<string>("WorkerEndNote")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<short?>("WorkerRatingForCostumer")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CostumerAddressId");

                    b.HasIndex("CostumerId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("App.Domain.Core.Job._1_Entitys.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("EstimatedWageCost")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentJobCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PictureFilePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentJobCategoryId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("App.Domain.Core.Job._1_Entitys.JobCategoryWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("WorkerId");

                    b.ToTable("JobCategoryWorkers");
                });

            modelBuilder.Entity("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.User.Costumer._1_Entitys.Costumer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ConfirmDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobsAcceptedByWorkersCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsBeingDoneByWorkersCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsCanceledByCostumerCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsDoneSuccessfullyByWorkersCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsFailedByWorkersCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsRequestedCount")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalSecurityId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("RatingByWorkers")
                        .HasColumnType("smallint");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCompanyProfitEarnedFromCostumer")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<decimal>("TotalMaterialCostPaid")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<decimal>("TotalMoneyPaid")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<decimal>("TotalWagePaid")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<int?>("UserCityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationalSecurityId")
                        .IsUnique();

                    b.HasIndex("UserCityId");

                    b.ToTable("Costumers");
                });

            modelBuilder.Entity("App.Domain.Core.User.Costumer._1_Entitys.CostumerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressCityId")
                        .HasColumnType("int");

                    b.Property<int>("CostumerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GpsCoordinates")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceivingByCostumer")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReceivingPersonFullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReceivingPersonPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressCityId");

                    b.HasIndex("CostumerId");

                    b.ToTable("CostumerAddresses");
                });

            modelBuilder.Entity("App.Domain.Core.User.Worker._1_Entitys.Worker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<short>("CompanySharePercentage")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("ConfirmDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobsAcceptedCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsCanceledByCostumersCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsDoingCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsDoneSuccessfullyCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsFailedByWorkerCount")
                        .HasColumnType("int");

                    b.Property<int>("JobsProposedCount")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MoneyOwedToCompany")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<string>("NationalSecurityId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<short>("RatingByCostumers")
                        .HasColumnType("smallint");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCompanyProfitEarnedFromWorker")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<decimal>("TotalMaterialCostEarned")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<decimal>("TotalMoneyEarned")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<decimal>("TotalWageEarned")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<int?>("UserCityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationalSecurityId")
                        .IsUnique();

                    b.HasIndex("UserCityId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Job._1_Entitys.Job", b =>
                {
                    b.HasOne("App.Domain.Core.User.Costumer._1_Entitys.CostumerAddress", "CostumerAddress")
                        .WithMany()
                        .HasForeignKey("CostumerAddressId");

                    b.HasOne("App.Domain.Core.User.Costumer._1_Entitys.Costumer", "Costumer")
                        .WithMany("CostumerJobs")
                        .HasForeignKey("CostumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Job._1_Entitys.JobCategory", null)
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId");

                    b.HasOne("App.Domain.Core.User.Worker._1_Entitys.Worker", "Worker")
                        .WithMany("WorkerJobs")
                        .HasForeignKey("WorkerId");

                    b.Navigation("Costumer");

                    b.Navigation("CostumerAddress");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("App.Domain.Core.Job._1_Entitys.JobCategory", b =>
                {
                    b.HasOne("App.Domain.Core.Job._1_Entitys.JobCategory", "ParentJobCategory")
                        .WithMany("ChildrenJobCategories")
                        .HasForeignKey("ParentJobCategoryId");

                    b.Navigation("ParentJobCategory");
                });

            modelBuilder.Entity("App.Domain.Core.Job._1_Entitys.JobCategoryWorker", b =>
                {
                    b.HasOne("App.Domain.Core.Job._1_Entitys.JobCategory", "JobCategory")
                        .WithMany("JobCategoryWorkers")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.User.Worker._1_Entitys.Worker", "Worker")
                        .WithMany("JobCategoryWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCategory");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("App.Domain.Core.User.Costumer._1_Entitys.Costumer", b =>
                {
                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityUser", "AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.BaseData._1_Entities.City", "UserCity")
                        .WithMany()
                        .HasForeignKey("UserCityId");

                    b.Navigation("AppIdentityUser");

                    b.Navigation("UserCity");
                });

            modelBuilder.Entity("App.Domain.Core.User.Costumer._1_Entitys.CostumerAddress", b =>
                {
                    b.HasOne("App.Domain.Core.BaseData._1_Entities.City", "AddressCity")
                        .WithMany()
                        .HasForeignKey("AddressCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.User.Costumer._1_Entitys.Costumer", "Costumer")
                        .WithMany("CostumerAddresses")
                        .HasForeignKey("CostumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressCity");

                    b.Navigation("Costumer");
                });

            modelBuilder.Entity("App.Domain.Core.User.Worker._1_Entitys.Worker", b =>
                {
                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityUser", "AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.BaseData._1_Entities.City", "UserCity")
                        .WithMany()
                        .HasForeignKey("UserCityId");

                    b.Navigation("AppIdentityUser");

                    b.Navigation("UserCity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.User.AppIdentity._1_Entitys.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Job._1_Entitys.JobCategory", b =>
                {
                    b.Navigation("ChildrenJobCategories");

                    b.Navigation("JobCategoryWorkers");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("App.Domain.Core.User.Costumer._1_Entitys.Costumer", b =>
                {
                    b.Navigation("CostumerAddresses");

                    b.Navigation("CostumerJobs");
                });

            modelBuilder.Entity("App.Domain.Core.User.Worker._1_Entitys.Worker", b =>
                {
                    b.Navigation("JobCategoryWorkers");

                    b.Navigation("WorkerJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
