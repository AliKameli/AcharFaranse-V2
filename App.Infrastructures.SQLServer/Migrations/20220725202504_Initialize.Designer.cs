// <auto-generated />
using System;
using App.Infrastructures.SQLServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructures.SQLServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220725202504_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("App.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CostumerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<short>("UserType")
                        .HasColumnType("smallint");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostumerId");

                    b.HasIndex("JobId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Entities.Costumer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ConfirmDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("PictureFilePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("RatingByWorkers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalCompanyProfitEarnedFromCostumer")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalMoneyPaid")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<int>("UserCityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastName");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("UserCityId");

                    b.ToTable("Costumers");
                });

            modelBuilder.Entity("App.Domain.Entities.CostumerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressCityId")
                        .HasColumnType("int");

                    b.Property<int>("CostumerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("GpsCoordinates")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceivingPersonFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceivingPersonPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("AddressCityId");

                    b.HasIndex("CostumerId");

                    b.ToTable("CostumerAddresses");
                });

            modelBuilder.Entity("App.Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("CompanyProfit")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CostumerAddressId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostumerEstimatedFinalCost")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<int>("CostumerId")
                        .HasColumnType("int");

                    b.Property<byte?>("CostumerRatingForWorker")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("FinalCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOnlinePayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPictureAttached")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("JobAcceptedByWorkerDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobCityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("JobClosedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("JobStartTimeRequestedByUserDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("JobStartedByWorkerDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("JobStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MaterialCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<string>("OnlinePaymentReceiptInfo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("WageCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<byte?>("WorkerRatingForCostumer")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CostumerAddressId");

                    b.HasIndex("CostumerId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobCityId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("App.Domain.Entities.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("EstimatedWageCost")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentJobCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PictureFilePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentJobCategoryId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("App.Domain.Entities.JobCategoryWorker", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("JobCategoryId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("JobCategoryWorkers");
                });

            modelBuilder.Entity("App.Domain.Entities.JobPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CostumerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileSavePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<short>("UserType")
                        .HasColumnType("smallint");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostumerId");

                    b.HasIndex("JobId");

                    b.HasIndex("WorkerId");

                    b.ToTable("JobPictures");
                });

            modelBuilder.Entity("App.Domain.Entities.JobWorkerProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("ProposalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<decimal>("ProposedPrice")
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)");

                    b.Property<string>("WorkerComment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("JobId", "WorkerId");

                    b.HasIndex("WorkerId");

                    b.ToTable("JobWorkerProposals");
                });

            modelBuilder.Entity("App.Domain.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ConfirmDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("MoneyOwedToCompany")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("PictureFilePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("RatingByCostumers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalCompanyProfitEarnedFromWorker")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalWageEarned")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 1)
                        .HasColumnType("decimal(10,1)")
                        .HasDefaultValue(0m);

                    b.Property<int>("UserCityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastName");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("UserCityId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Entities.Costumer", "Costumer")
                        .WithMany("Comments")
                        .HasForeignKey("CostumerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Entities.Job", "Job")
                        .WithMany("Comments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Worker", "Worker")
                        .WithMany("Comments")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Costumer");

                    b.Navigation("Job");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("App.Domain.Entities.Costumer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("App.Domain.Entities.Costumer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.City", "UserCity")
                        .WithMany("Costumers")
                        .HasForeignKey("UserCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdentityUser");

                    b.Navigation("UserCity");
                });

            modelBuilder.Entity("App.Domain.Entities.CostumerAddress", b =>
                {
                    b.HasOne("App.Domain.Entities.City", "AddressCity")
                        .WithMany("CostumerAddresses")
                        .HasForeignKey("AddressCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Costumer", "Costumer")
                        .WithMany("CostumerAddresses")
                        .HasForeignKey("CostumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressCity");

                    b.Navigation("Costumer");
                });

            modelBuilder.Entity("App.Domain.Entities.Job", b =>
                {
                    b.HasOne("App.Domain.Entities.CostumerAddress", "CostumerAddress")
                        .WithMany("Jobs")
                        .HasForeignKey("CostumerAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Costumer", "Costumer")
                        .WithMany("CostumerJobs")
                        .HasForeignKey("CostumerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.City", "JobCity")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Worker", "Worker")
                        .WithMany("WorkerJobs")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Costumer");

                    b.Navigation("CostumerAddress");

                    b.Navigation("JobCategory");

                    b.Navigation("JobCity");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("App.Domain.Entities.JobCategory", b =>
                {
                    b.HasOne("App.Domain.Entities.JobCategory", "ParentJobCategory")
                        .WithMany("ChildrenJobCategories")
                        .HasForeignKey("ParentJobCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentJobCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.JobCategoryWorker", b =>
                {
                    b.HasOne("App.Domain.Entities.JobCategory", "JobCategory")
                        .WithMany("JobCategoryWorkers")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Worker", "Worker")
                        .WithMany("JobCategoryWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCategory");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("App.Domain.Entities.JobPicture", b =>
                {
                    b.HasOne("App.Domain.Entities.Costumer", "Costumer")
                        .WithMany("JobPictures")
                        .HasForeignKey("CostumerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Entities.Job", "Job")
                        .WithMany("JobPictures")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Worker", "Worker")
                        .WithMany("JobPictures")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Costumer");

                    b.Navigation("Job");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("App.Domain.Entities.JobWorkerProposal", b =>
                {
                    b.HasOne("App.Domain.Entities.Job", "Job")
                        .WithMany("JobWorkerProposals")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Worker", "Worker")
                        .WithMany("JobWorkerProposals")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("App.Domain.Entities.Worker", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", "IdentityUser")
                        .WithOne()
                        .HasForeignKey("App.Domain.Entities.Worker", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.City", "UserCity")
                        .WithMany("Workers")
                        .HasForeignKey("UserCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdentityUser");

                    b.Navigation("UserCity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Entities.City", b =>
                {
                    b.Navigation("CostumerAddresses");

                    b.Navigation("Costumers");

                    b.Navigation("Jobs");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("App.Domain.Entities.Costumer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CostumerAddresses");

                    b.Navigation("CostumerJobs");

                    b.Navigation("JobPictures");
                });

            modelBuilder.Entity("App.Domain.Entities.CostumerAddress", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("App.Domain.Entities.Job", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("JobPictures");

                    b.Navigation("JobWorkerProposals");
                });

            modelBuilder.Entity("App.Domain.Entities.JobCategory", b =>
                {
                    b.Navigation("ChildrenJobCategories");

                    b.Navigation("JobCategoryWorkers");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("App.Domain.Entities.Worker", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("JobCategoryWorkers");

                    b.Navigation("JobPictures");

                    b.Navigation("JobWorkerProposals");

                    b.Navigation("WorkerJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
