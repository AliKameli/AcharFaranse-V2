@model List<App.Domain.Dtos.JobCategoryDto>
@{
    ViewData.TryGetValue("ParentId", out var data);
    var parentId = (int?) (data ?? data as int?);
}
@foreach (var category in Model.Where(x => x.ParentJobCategoryId == parentId))
{
    <div class="row">
        <div class="col-auto">
            <p>
                <a class="btn btn-primary" data-bs-toggle="collapse" href="@(new string(@"#collapse" + category.Id))" role="button" aria-expanded="True" aria-controls="@(new string(@"collapse" + category.Id))">
                    @category.Name
                </a>
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-auto">
            <div class="collapse" id="@(new string(@"collapse" + category.Id))">
                <div class="card card-body">
                    <div class="card" style="width: 100%;">
                        <div class="card-body">
                            <h5 class="card-title">@category.Name</h5>
                            <p class="card-text">Atonement they blazon neer alas bade none will to none bower honeyed fabled than go in wins was him cheer who fabled deem and his at to deemed heavenly mirthful @category.Description</p>
                            @if (Model.Any(x => x.ParentJobCategoryId == category.Id))
                            {
                                @await Component.InvokeAsync("WorkerJobCatChoose", new
                                {
                                    jobCategories = Model,
                                    parentId = category.Id
                                })
                            }
                            else
                            {
                                <a class="btn btn-info" asp-area="Worker" asp-controller="JobCategory" asp-action="Add" asp-route-jobCatId="@category.Id">انتخاب</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}